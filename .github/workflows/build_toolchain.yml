on:
  workflow_call:
    inputs:
      repo_url:     # https://github.com/cepawiel/KallistiOS
        required: true
        type: string
      repo_branch:  # master
        required: true
        type: string
      name:         # kos
        required: true
        type: string
      build_type:   # raw or kos are only options currently
        required: true
        type: string
      config_file:  # config.mk.stable.sample
        required: true
        type: string
      sha:          # 9db78833f9f1228318f42b6ef1bd97593273f48c
        required: true
        type: string
      tag:          # gcc12
        required: true
        type: string
      latest:
        required: true
        type: string

env:
  CONTAINER_NAME_FULL:  toolchain-${{ inputs.name }}:${{ inputs.tag }}

# name:       
jobs:
  setup:
    name: Gathering Pre-Build Info
    runs-on: ubuntu-latest
    outputs:
      github-token-exists:  ${{ steps.check-gh-token.outputs.defined }}
      sha-exists:           ${{ steps.check-container-tags.outputs.exists }}
      sha-tag:              ${{ steps.check-container-tags.outputs.tag }}
    steps:
      - uses: actions/checkout@v3 

      - id: check-gh-token
        env:
          GH_TOK: ${{ secrets.GITHUB_TOKEN }}
        if: "${{ env.GH_TOK != '' }}"
        run: echo "defined=true" >> $GITHUB_OUTPUT

      # TODO: Remove when containers are public
      - name: Login to Github Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for Existing Container
        id: check-container-tags
        env:
          SHA_TAG: sha-${{ inputs.sha }}-${{ inputs.tag }}
          NAME: toolchain-${{ inputs.name }}
        # TODO: unhardcode URL
        run: |
          echo "tag=$SHA_TAG" >> $GITHUB_OUTPUT
          if docker pull ghcr.io/cepawiel/$NAME:$SHA_TAG; then
            echo "Tag $SHA_TAG exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Tag $SHA_TAG does not exist"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  build-toolchain-container:
    needs: [setup]
    name: Building Toolchain Container
    runs-on: [self-hosted, X64]
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2

      - name: Checkout KOS Repo
        run: |
          git clone ${{ inputs.repo_url }} -b ${{ inputs.repo_branch }} containers/KOS
          cd containers/KOS
          git checkout ${{ inputs.sha }}
      
      - name: Login to Github Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Toolchain Metadata
        id: toolchain-meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/cepawiel/toolchain-${{ inputs.name }}
          flavor: |
            latest=false
          tags: |
            type=raw,value={{date 'YYYY-MM-DD' tz='America/Chicago'}}-${{ inputs.tag }}
            type=raw,value=sha-${{ inputs.sha }}-${{ inputs.tag }}
            type=raw,value=latest-${{ inputs.tag }}
            
            type=raw,value={{date 'YYYY-MM-DD' tz='America/Chicago'}},enabled=${{ inputs.latest }}
            type=raw,value=sha-${{ inputs.sha }},enabled=${{ inputs.latest }}
            type=raw,value=latest,enabled=${{ inputs.latest }}

      - name: Build Toolchain
        uses: docker/build-push-action@v3
        with:
          # pull: true
          context: containers
          file: containers/Dockerfile
          target: toolchain
          build-args: |
            CONFIG_FILE=${{ inputs.config_file }}
            BUILD_TYPE=${{ inputs.build_type }}
          tags: ${{ steps.toolchain-meta.outputs.tags }}
          labels: ${{ steps.toolchain-meta.outputs.labels }}
          push: ${{ needs.setup.outputs.github-token-exists == 'true' }}
          cache-from: type=gha,scope=${{ env.CONTAINER_NAME_FULL }}
          cache-to: type=gha,mode=max,scope=${{ env.CONTAINER_NAME_FULL }}
      
      - name: Generate KOS Metadata
        if: ${{ inputs.build_type == 'kos' }}
        id: kos-meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/cepawiel/dreamcast-${{ inputs.name }}
          flavor: |
            latest=false
          tags: |
            type=raw,value={{date 'YYYY-MM-DD' tz='America/Chicago'}}-${{ inputs.tag }}
            type=raw,value=sha-${{ inputs.sha }}-${{ inputs.tag }}
            type=raw,value=latest-${{ inputs.tag }}
            
            type=raw,value={{date 'YYYY-MM-DD' tz='America/Chicago'}},enabled=${{ inputs.latest }}
            type=raw,value=sha-${{ inputs.sha }},enabled=${{ inputs.latest }}
            type=raw,value=latest,enabled=${{ inputs.latest }}


      - name: Build KOS
        if: ${{ inputs.build_type == 'kos' }}
        uses: docker/build-push-action@v3
        with:
          # pull: true
          context: containers
          file: containers/Dockerfile
          target: kos
          build-args: |
            CONFIG_FILE=${{ inputs.config_file }}
            BUILD_TYPE=${{ inputs.build_type }}
          tags: ${{ steps.kos-meta.outputs.tags }}
          labels: ${{ steps.kos-meta.outputs.labels }}
          push: ${{ needs.setup.outputs.github-token-exists == 'true' }}
          cache-from: type=gha,scope=${{ env.CONTAINER_NAME_FULL }}
          cache-to: type=gha,mode=max,scope=${{ env.CONTAINER_NAME_FULL }}

      - if: ${{ inputs.build_type == 'kos' }}
        run: git clone https://github.com/KallistiOS/kos-ports -b master containers/PORTS

      - name: Generate KOS-Ports Metadata
        if: ${{ inputs.build_type == 'kos' }}
        id: kos-ports-meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/cepawiel/dreamcast-ports-${{ inputs.name }}
          flavor: |
            latest=false
          tags: |
            type=raw,value={{date 'YYYY-MM-DD' tz='America/Chicago'}}-${{ inputs.tag }}
            type=raw,value=sha-${{ inputs.sha }}-${{ inputs.tag }}
            type=raw,value=latest-${{ inputs.tag }}
            
            type=raw,value={{date 'YYYY-MM-DD' tz='America/Chicago'}},enabled=${{ inputs.latest }}
            type=raw,value=sha-${{ inputs.sha }},enabled=${{ inputs.latest }}
            type=raw,value=latest,enabled=${{ inputs.latest }}

      - name: Build KOS-Ports
        if: ${{ inputs.build_type == 'kos' }}
        uses: docker/build-push-action@v3
        with:
          # pull: true
          context: containers
          file: containers/Dockerfile
          target: kos-ports
          build-args: |
            CONFIG_FILE=${{ inputs.config_file }}
            BUILD_TYPE=${{ inputs.build_type }}
          tags: ${{ steps.kos-ports-meta.outputs.tags }}
          labels: ${{ steps.kos-ports-meta.outputs.labels }}
          push: ${{ needs.setup.outputs.github-token-exists == 'true' }}
          cache-from: type=gha,scope=${{ env.CONTAINER_NAME_FULL }}
          cache-to: type=gha,mode=max,scope=${{ env.CONTAINER_NAME_FULL }}

      - run: docker images
      
  # publish-toolchain-containers:
  #   needs: [setup, build-toolchain-containers]
  #   if: needs.setup.outputs.github-token-exists == 'true'
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       toolchain: ${{ fromJson(needs.setup.outputs.toolchains) }}
  #   name: Publish ${{ matrix.toolchain.name }} Toolchain
  #   runs-on: ubuntu-latest
  #   env:
  #     CACHE_FROM: type=gha,scope=${{ matrix.toolchain.name }}
  #     CACHE_TO: type=gha,mode=max,scope=${{ matrix.toolchain.name }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: docker/setup-buildx-action@v2

  #     - name: Get KOS Repo Info
  #       id: kos-repo-meta
  #       uses: ./.github/actions/clone-with-info
  #       with:
  #         container_json: ${{ toJson(fromJson(needs.setup.outputs.build).kos) }}
  #         folder: KOS

  #     - env:
  #         SHA: ${{ steps.kos-repo-meta.outpust.sha }}
  #         BRANCH: ${{ steps.kos-repo-meta.outputs.branch }}
  #         URL: ${{ steps.kos-repo-meta.outputs.url }}
  #       run: |
  #         echo $SHA
  #         echo $BRANCH
  #         echo $URL

  #     - name: Publish Toolchain Container
  #       uses: docker/build-push-action@v3
  #       with:
  #         # pull: true
  #         context: .
  #         file: kos_build/Dockerfile
  #         target: toolchain
  #         build-args: |
  #           CONFIG_FILE=${{ matrix.toolchain.config }}
  #         tags: ${{ steps.toolchain-meta.outputs.tags }}
  #         labels: ${{ steps.toolchain-meta.outputs.labels }}
  #         push: true
  #         cache-from: ${{ env.CACHE_FROM }}
  #         cache-to: ${{ env.CACHE_TO }}

  # publish-kos-containers:
  #   needs: [setup, build-all-test]
  #   if: needs.setup.outputs.github-token-exists == 'true'
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       target: ${{ fromJson(needs.setup.outputs.build).targets }}
  #       toolchain: ${{ fromJson(needs.setup.outputs.toolchains) }}
  #   name: Publish ${{ matrix.toolchain.name }} ${{ matrix.target.name }} KOS
  #   runs-on: ubuntu-latest
  #   env:
  #     CACHE_FROM: type=gha,scope=${{ matrix.toolchain.name }}
  #     CACHE_TO: type=gha,mode=max,scope=${{ matrix.toolchain.name }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: docker/setup-buildx-action@v2

  #     - run: echo "${{ toJSON(matrix) }}"

  #     # - run: git clone ${{ fromJson(needs.setup.outputs.build).kos.url }} -b ${{ fromJson(needs.setup.outputs.build).kos.branch }} KOS
  #     - run: git clone ${{ fromJson(needs.setup.outputs.build).ports.url }} -b ${{ fromJson(needs.setup.outputs.build).ports.branch }} PORTS

  #     - name: Get KOS Repo Info
  #       id: kos-repo-meta
  #       uses: ./.github/actions/clone-with-info
  #       with:
  #         container_json: ${{ toJson(fromJson(needs.setup.outputs.build).kos) }}
  #         folder: KOS

  #     - name: Generate KOS Metadata
  #       id: kos-meta
  #       uses: ./.github/actions/generate-metadata
  #       with:
  #         image_name_base: ${{ fromJson(needs.setup.outputs.build).tag }}-${{ matrix.target.tag }}
  #         toolchain_name: ${{ matrix.toolchain.tag }}
  #         toolchain_latest: ${{ matrix.toolchain.latest }}
  #         kos_branch: ${{ steps.kos-repo-meta.outputs.branch }}
  #         kos_sha: ${{ steps.kos-repo-meta.outputs.sha }}

  #     - name: Login to Github Container Registry
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Publish KOS Container
  #       uses: docker/build-push-action@v3
  #       with:
  #         # pull: true
  #         context: .
  #         file: kos_build/Dockerfile
  #         target: kos
  #         build-args: |
  #           CONFIG_FILE=${{ matrix.toolchain.config }}
  #           KOS_SUBARCH=${{ matrix.target.kos_subarch }}
  #         tags: ${{ steps.kos-meta.outputs.tags }}
  #         labels: ${{ steps.kos-meta.outputs.labels }}
  #         push: true
  #         cache-from: ${{ env.CACHE_FROM }}
  #         cache-to: ${{ env.CACHE_TO }}